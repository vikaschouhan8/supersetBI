{"remainingRequest":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/maximebeauchemin/code/superset/superset/assets/node_modules/ts-loader/index.js??ref--5-2!/Users/maximebeauchemin/code/superset/superset/assets/src/query/buildQueryObject.ts","dependencies":[{"path":"/Users/maximebeauchemin/code/superset/superset/assets/src/query/buildQueryObject.ts","mtime":1559113491569},{"path":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/ts-loader/index.js","mtime":1543302582000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FormData_1 = require(\"./FormData\");\nvar Metric_1 = require(\"./Metric\");\n// Build the common segments of all query objects (e.g. the granularity field derived from\n// either sql alchemy or druid). The segments specific to each viz type is constructed in the\n// buildQuery method for each viz type (see `wordcloud/buildQuery.ts` for an example).\n// Note the type of the formData argument passed in here is the type of the formData for a\n// specific viz, which is a subtype of the generic formData shared among all viz types.\nfunction buildQueryObject(formData) {\n    return {\n        granularity: FormData_1.getGranularity(formData),\n        metrics: new Metric_1.Metrics(formData).getMetrics(),\n    };\n}\nexports.default = buildQueryObject;\n",{"version":3,"file":"/Users/maximebeauchemin/code/superset/superset/assets/src/query/buildQueryObject.ts","sourceRoot":"","sources":["/Users/maximebeauchemin/code/superset/superset/assets/src/query/buildQueryObject.ts"],"names":[],"mappings":";;AAAA,uCAAsD;AACtD,mCAA2C;AAS3C,0FAA0F;AAC1F,6FAA6F;AAC7F,sFAAsF;AACtF,0FAA0F;AAC1F,uFAAuF;AACvF,SAAwB,gBAAgB,CAAqB,QAAW;IACtE,OAAO;QACL,WAAW,EAAE,yBAAc,CAAC,QAAQ,CAAC;QACrC,OAAO,EAAE,IAAI,gBAAO,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE;KAC5C,CAAC;AACJ,CAAC;AALD,mCAKC","sourcesContent":["import FormData, { getGranularity } from './FormData';\nimport Metric, { Metrics } from './Metric';\n\n// TODO: fill out the rest of the query object\nexport interface QueryObject {\n  granularity: string;\n  groupby?: string[];\n  metrics?: Metric[];\n}\n\n// Build the common segments of all query objects (e.g. the granularity field derived from\n// either sql alchemy or druid). The segments specific to each viz type is constructed in the\n// buildQuery method for each viz type (see `wordcloud/buildQuery.ts` for an example).\n// Note the type of the formData argument passed in here is the type of the formData for a\n// specific viz, which is a subtype of the generic formData shared among all viz types.\nexport default function buildQueryObject<T extends FormData>(formData: T): QueryObject {\n  return {\n    granularity: getGranularity(formData),\n    metrics: new Metrics(formData).getMetrics(),\n  };\n}\n"]}]}