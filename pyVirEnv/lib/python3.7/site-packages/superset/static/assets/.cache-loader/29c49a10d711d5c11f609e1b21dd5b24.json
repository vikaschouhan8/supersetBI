{"remainingRequest":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/maximebeauchemin/code/superset/superset/assets/node_modules/ts-loader/index.js??ref--5-2!/Users/maximebeauchemin/code/superset/superset/assets/src/query/Metric.ts","dependencies":[{"path":"/Users/maximebeauchemin/code/superset/superset/assets/src/query/Metric.ts","mtime":1559113491568},{"path":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/ts-loader/index.js","mtime":1543302582000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nexports.LABEL_MAX_LENGTH = 43;\n// Note that the values of MetricKeys are lower_snake_case because they're\n// used as keys of form data jsons.\nvar MetricKey;\n(function (MetricKey) {\n    MetricKey[\"METRIC\"] = \"metric\";\n    MetricKey[\"METRICS\"] = \"metrics\";\n    MetricKey[\"PERCENT_METRICS\"] = \"percent_metrics\";\n    MetricKey[\"RIGHT_AXIS_METRIC\"] = \"metric_2\";\n    MetricKey[\"SECONDARY_METRIC\"] = \"secondary_metric\";\n    MetricKey[\"X\"] = \"x\";\n    MetricKey[\"Y\"] = \"y\";\n    MetricKey[\"SIZE\"] = \"size\";\n})(MetricKey = exports.MetricKey || (exports.MetricKey = {}));\nvar Aggregate;\n(function (Aggregate) {\n    Aggregate[\"AVG\"] = \"AVG\";\n    Aggregate[\"COUNT\"] = \"COUNT \";\n    Aggregate[\"COUNT_DISTINCT\"] = \"COUNT_DISTINCT\";\n    Aggregate[\"MAX\"] = \"MAX\";\n    Aggregate[\"MIN\"] = \"MIN\";\n    Aggregate[\"SUM\"] = \"SUM\";\n})(Aggregate = exports.Aggregate || (exports.Aggregate = {}));\nvar ExpressionType;\n(function (ExpressionType) {\n    ExpressionType[\"SIMPLE\"] = \"SIMPLE\";\n    ExpressionType[\"SQL\"] = \"SQL\";\n})(ExpressionType = exports.ExpressionType || (exports.ExpressionType = {}));\nvar Metrics = /** @class */ (function () {\n    function Metrics(formData) {\n        this.metrics = [];\n        for (var _i = 0, _a = Object.keys(MetricKey); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var metric = formData[MetricKey[key]];\n            if (metric) {\n                if (typeof metric === 'string') {\n                    this.metrics.push({\n                        label: metric,\n                    });\n                }\n                else {\n                    // Note we further sanitize the metric label for BigQuery datasources\n                    // TODO: move this logic to the client once client has more info on the\n                    // the datasource\n                    var label = metric.label || this.getDefaultLabel(metric);\n                    this.metrics.push(tslib_1.__assign({}, metric, { label: label }));\n                }\n            }\n        }\n    }\n    Metrics.prototype.getMetrics = function () {\n        return this.metrics;\n    };\n    Metrics.prototype.getLabels = function () {\n        return this.metrics.map(function (m) { return m.label; });\n    };\n    Metrics.prototype.getDefaultLabel = function (metric) {\n        var label;\n        if (metric.expressionType === ExpressionType.SIMPLE) {\n            label = metric.aggregate + \"(\" + (metric.column.columnName) + \")\";\n        }\n        else {\n            label = metric.sqlExpression;\n        }\n        return label.length <= exports.LABEL_MAX_LENGTH ? label :\n            label.substring(0, exports.LABEL_MAX_LENGTH - 3) + \"...\";\n    };\n    return Metrics;\n}());\nexports.Metrics = Metrics;\n",{"version":3,"file":"/Users/maximebeauchemin/code/superset/superset/assets/src/query/Metric.ts","sourceRoot":"","sources":["/Users/maximebeauchemin/code/superset/superset/assets/src/query/Metric.ts"],"names":[],"mappings":";;;AAGa,QAAA,gBAAgB,GAAG,EAAE,CAAC;AAEnC,0EAA0E;AAC1E,mCAAmC;AACnC,IAAY,SASX;AATD,WAAY,SAAS;IACnB,8BAAiB,CAAA;IACjB,gCAAmB,CAAA;IACnB,gDAAmC,CAAA;IACnC,2CAA8B,CAAA;IAC9B,kDAAqC,CAAA;IACrC,oBAAO,CAAA;IACP,oBAAO,CAAA;IACP,0BAAa,CAAA;AACf,CAAC,EATW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QASpB;AAED,IAAY,SAOX;AAPD,WAAY,SAAS;IACnB,wBAAW,CAAA;IACX,6BAAgB,CAAA;IAChB,8CAAiC,CAAA;IACjC,wBAAW,CAAA;IACX,wBAAW,CAAA;IACX,wBAAW,CAAA;AACb,CAAC,EAPW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAOpB;AAED,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,mCAAiB,CAAA;IACjB,6BAAW,CAAA;AACb,CAAC,EAHW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAGzB;AAwBD;IAIE,iBAAY,QAAkB;QAC5B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,KAAkB,UAAsB,EAAtB,KAAA,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAtB,cAAsB,EAAtB,IAAsB,EAAE;YAArC,IAAM,GAAG,SAAA;YACZ,IAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAc,CAAC,CAAC;YACrD,IAAI,MAAM,EAAE;gBACV,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;oBAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;wBAChB,KAAK,EAAE,MAAM;qBACd,CAAC,CAAC;iBACJ;qBAAM;oBACL,qEAAqE;oBACrE,uEAAuE;oBACvE,iBAAiB;oBACjB,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;oBAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,sBACZ,MAAM,IACT,KAAK,OAAA,IACL,CAAC;iBACJ;aACF;SACF;IACH,CAAC;IAEM,4BAAU,GAAjB;QACE,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEM,2BAAS,GAAhB;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;IAC1C,CAAC;IAEO,iCAAe,GAAvB,UAAwB,MAAmB;QACzC,IAAI,KAAa,CAAC;QAClB,IAAI,MAAM,CAAC,cAAc,KAAK,cAAc,CAAC,MAAM,EAAE;YACnD,KAAK,GAAM,MAAM,CAAC,SAAS,SAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAG,CAAC;SAC9D;aAAM;YACL,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC;SAC9B;QACD,OAAO,KAAK,CAAC,MAAM,IAAI,wBAAgB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAC5C,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,wBAAgB,GAAG,CAAC,CAAC,QAAK,CAAC;IACrD,CAAC;IACH,cAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,0BAAO","sourcesContent":["import Column from './Column';\nimport FormData from './FormData';\n\nexport const LABEL_MAX_LENGTH = 43;\n\n// Note that the values of MetricKeys are lower_snake_case because they're\n// used as keys of form data jsons.\nexport enum MetricKey {\n  METRIC = 'metric',\n  METRICS = 'metrics',\n  PERCENT_METRICS = 'percent_metrics',\n  RIGHT_AXIS_METRIC = 'metric_2',\n  SECONDARY_METRIC = 'secondary_metric',\n  X = 'x',\n  Y = 'y',\n  SIZE = 'size',\n}\n\nexport enum Aggregate {\n  AVG = 'AVG',\n  COUNT = 'COUNT ',\n  COUNT_DISTINCT = 'COUNT_DISTINCT',\n  MAX = 'MAX',\n  MIN = 'MIN',\n  SUM = 'SUM',\n}\n\nexport enum ExpressionType {\n  SIMPLE = 'SIMPLE',\n  SQL = 'SQL',\n}\n\ninterface AdhocMetricSimple {\n  expressionType: ExpressionType.SIMPLE;\n  column: Column;\n  aggregate: Aggregate;\n}\n\ninterface AdhocMetricSQL {\n  expressionType: ExpressionType.SQL;\n  sqlExpression: string;\n}\n\nexport type AdhocMetric = {\n  label?: string,\n  optionName?: string,\n} & (AdhocMetricSimple | AdhocMetricSQL);\n\ntype Metric = {\n  label: string;\n} & Partial<AdhocMetric>;\n\nexport default Metric;\n\nexport class Metrics {\n  // Use Array to maintain insertion order for metrics that are order sensitive\n  private metrics: Metric[];\n\n  constructor(formData: FormData) {\n    this.metrics = [];\n    for (const key of Object.keys(MetricKey)) {\n      const metric = formData[MetricKey[key] as MetricKey];\n      if (metric) {\n        if (typeof metric === 'string') {\n          this.metrics.push({\n            label: metric,\n          });\n        } else {\n          // Note we further sanitize the metric label for BigQuery datasources\n          // TODO: move this logic to the client once client has more info on the\n          // the datasource\n          const label = metric.label || this.getDefaultLabel(metric);\n          this.metrics.push({\n            ...metric,\n            label,\n          });\n        }\n      }\n    }\n  }\n\n  public getMetrics() {\n    return this.metrics;\n  }\n\n  public getLabels() {\n    return this.metrics.map((m) => m.label);\n  }\n\n  private getDefaultLabel(metric: AdhocMetric) {\n    let label: string;\n    if (metric.expressionType === ExpressionType.SIMPLE) {\n      label = `${metric.aggregate}(${(metric.column.columnName)})`;\n    } else {\n      label = metric.sqlExpression;\n    }\n    return label.length <= LABEL_MAX_LENGTH ? label :\n      `${label.substring(0, LABEL_MAX_LENGTH - 3)}...`;\n  }\n}\n"]}]}