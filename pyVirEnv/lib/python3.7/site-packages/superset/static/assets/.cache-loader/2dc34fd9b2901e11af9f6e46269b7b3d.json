{"remainingRequest":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/maximebeauchemin/code/superset/superset/assets/node_modules/ts-loader/index.js??ref--5-2!/Users/maximebeauchemin/code/superset/superset/assets/src/query/FormData.ts","dependencies":[{"path":"/Users/maximebeauchemin/code/superset/superset/assets/src/query/FormData.ts","mtime":1559113491568},{"path":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maximebeauchemin/code/superset/superset/assets/node_modules/ts-loader/index.js","mtime":1543302582000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getGranularity(formData) {\n    return 'granularity_sqla' in formData ? formData.granularity_sqla : formData.granularity;\n}\nexports.getGranularity = getGranularity;\n",{"version":3,"file":"/Users/maximebeauchemin/code/superset/superset/assets/src/query/FormData.ts","sourceRoot":"","sources":["/Users/maximebeauchemin/code/superset/superset/assets/src/query/FormData.ts"],"names":[],"mappings":";;AA2BA,SAAgB,cAAc,CAAC,QAAkB;IAC/C,OAAO,kBAAkB,IAAI,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC;AAC3F,CAAC;AAFD,wCAEC","sourcesContent":["import { AdhocMetric, MetricKey } from './Metric';\n\n// Type signature and utility functions for formData shared by all viz types\n// It will be gradually filled out as we build out the query object\n\n// Define mapped type separately to work around a limitation of TypeScript\n// https://github.com/Microsoft/TypeScript/issues/13573\n// The Metrics in formData is either a string or a proper metric. It will be\n// unified into a proper Metric type during buildQuery (see `/query/Metrics.ts`).\ntype Metrics = Partial<Record<MetricKey, AdhocMetric | string>>;\n\ntype BaseFormData = {\n  datasource: string;\n} & Metrics;\n\n// FormData is either sqla-based or druid-based\ntype SqlaFormData = {\n  granularity_sqla: string;\n} & BaseFormData;\n\ntype DruidFormData = {\n  granularity: string;\n} & BaseFormData;\n\ntype FormData = SqlaFormData | DruidFormData;\nexport default FormData;\n\nexport function getGranularity(formData: FormData): string {\n  return 'granularity_sqla' in formData ? formData.granularity_sqla : formData.granularity;\n}\n"]}]}